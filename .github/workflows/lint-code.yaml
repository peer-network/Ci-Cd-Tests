name: Lint The Code

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install Dependencies
        run: npm run ci

      - name: Run Htmlhint
        run: npx htmlhint "**/*.html"

  unit-test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install Dependencies
        uses: npm run ci

      - name: Run Unit Test
        run: npm run test

  e2e-test:
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: "npm"

      - name: Install Dependencies
        uses: npm run ci

      - name: Run E2e Test
        run: npm run test:e2e

  upload-artifact:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    steps:
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        with:
           name: unit-test-results
           path: coverage/

      - name: Upload E2e Test Results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-result
          path: test-results/

  notify-on-failure:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Get Commit Author Email
        id: get_author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> $GITHUB_ENV
          # If no email is found, set a fallback email or exit gracefully
          if [ -z "$AUTHOR_EMAIL" ]; then
            echo "No author email found. Email notification will be skipped." >> $GITHUB_ENV
          fi

      - name: Get ClickUp User ID by Email
        id: clickup_user
        continue-on-error: true
        run: |
          response=$(curl -s -X GET "https://api.clickup.com/api/v2/team/${{ secrets.CLICKUP_TEAM_ID}}/member" \
            -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}")

          CLICKUP_USER_ID=$(echo "$response" | jq -r --arg email "${{ env.AUTHOR_EMAIL }}" '.members[] | select(.user.email == $email) | .user.id')

          if [ -z "$CLICKUP_USER_ID" ]; then
            echo "No matching ClickUp user found for $AUTHOR_EMAIL"
            CLICKUP_USER_ID="123456789"  # fallback default user ID
          fi

          echo "CLICKUP_USER_ID=$CLICKUP_USER_ID" >> $GITHUB_ENV

      - name: Create ClickUp task
        id: create_task
        continue-on-error: true
        run: |
          task_payload=$(jq -n \
            --arg name "CI Failure: ${{ github.workflow }}" \
            --arg desc "The workflow '${{ github.workflow }}' failed on commit ${{ github.sha }}.\nRepo: ${{ github.repository }}\nCommit by: ${{ env.AUTHOR_EMAIL }}" \
            --argjson assignees "[\"${{ env.CLICKUP_USER_ID }}\"]" \
            '{ name: $name, description: $desc, assignees: $assignees }')

          response=$(curl -s -X POST "https://api.clickup.com/api/v2/list/${{ secrets.CLICKUP_LIST_ID }}/task" \
            -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$task_payload")

          TASK_ID=$(echo "$response" | jq -r '.id')
          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV

      - name: Add Comment to CLICKUP TASK
        continue-on-error: true
        run: |
          curl -s -X POST "https://api.clickup.com/api/v2/task/${{ env.TASK_ID }}/comment" \
            -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
            "comment_text": "CI failed on commit ${{ github.sha }}. Task auto-assigned to the developer."
          }'

      - name: Send Email via Resend (Fallback)
        if: always()
        run: |
          # Ensure email exists before sending
          if [ -n "${{ env.AUTHOR_EMAIL }}" ]; then
            curl -X POST https://api.resend.com/emails \
            -H "Authorization: Bearer ${{ secrets.RESEND_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "from": "onboarding@resend.dev",
              "to": ["'${{ env.AUTHOR_EMAIL }}'"],
              "subject": "ðŸš¨ GitHub Workflow Failed: ${{ github.workflow }}",
              "html": "<p>The workflow <b>${{ github.workflow }}</b> failed.<br>Commit: <code>${{ github.sha }}</code><br>Author: ${{ env.AUTHOR_EMAIL }}</p>"
            }'
          else
            echo "No author email found. Email will not be sent."
          fi
